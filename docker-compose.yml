version: "3"
services:

  user:
    build:
      dockerfile: Dockerfile
      context: ./user
    container_name: user
    # ports:
    #   - "3099:3099"
    restart: always
    depends_on:
      # - "database"
      - "redis"
    volumes:
      - ./user:/app/user
      - /app/user/node_modules
    env_file:
      - ./user/.env
    # deploy:
    #   replicas: 3

  products:
    build:
      dockerfile: Dockerfile
      context: ./products
    container_name: products
    restart: always
    depends_on:
      # - "database"
      - "redis"
    volumes:
      - ./products:/app/products
      - /app/products/node_modules
    env_file:
      - ./products/.env

  redis:
    container_name: redis
    image: redis:latest
    ports:
      - "6379:6379"
    restart: always
    volumes:
      - redis-data:/data

  nginx-proxy:
    build:
      dockerfile: Dockerfile
      context: ./proxy
    container_name: nginx
    depends_on:
      - user
      - products
    ports:
      - 4000:80

  # database:
  #   image: mongo
  #   ports:
  #     - '27017:27017'
  #   container_name: eshop-db
  #   environment:
  #     MONGO_INITDB_ROOT_USERNAME: ${MONGO_USERNAME}
  #     MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
  #   volumes:
  #     - mongodb_data:/data/db

  zookeeper:
    container_name: zookeeper
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 22181:2181
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-logs:/var/lib/zookeeper/log

  kafka:
    container_name: kafka
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - 9092:9092
      - 9093:9093
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      ZOOKEEPER_SASL_ENABLED: "false"
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,SASL_PLAINTEXT://localhost:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,SASL_PLAINTEXT:SASL_PLAINTEXT
      KAFKA_SECURITY_INTER_BROKER_PROTOCOL_MAP: SASL_PLAINTEXT
      KAFKA_SASL_MECHANISM_INTER_BROKER_PROTOCOL: PLAIN
      KAFKA_SASL_ENABLED_MECHANISMS: PLAIN
      KAFKA_OPTS: -Djava.security.auth.login.config=/etc/kafka/configs/kafka_server_jaas.conf
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    volumes:
      - kafka-data:/var/lib/kafka/data
      - kafka-logs:/var/lib/kafka/logs
      - ./configs:/etc/kafka/configs

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui
    ports:
      - "8090:8080"
    depends_on:
      - kafka
      - zookeeper
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAP_SERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
      AUTH_TYPE: "LOGIN_FORM"
      SPRING_SECURITY_USER_NAME: thwahatkp
      SPRING_SECURITY_USER_PASSWORD: 123456
  # rabbitmq:
  #   image: rabbitmq:management
  #   ports:
  #     - "5672:5672"
  #     - "15672:15672"
  #   container_name: rabbitmq
  #   restart: always
  #   volumes:
  #     - rabbitmq_data:/var/lib/rabbitmq
  #   environment:
  #     RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
  #     RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASS}

volumes:
  zookeeper-data:
  zookeeper-logs:
  kafka-data:
  kafka-logs:
  redis-data:
    # mongodb_data:
    # rabbitmq_data:
